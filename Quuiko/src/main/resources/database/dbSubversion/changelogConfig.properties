##Comments: each value of property must be on one line.########################################
######Configuration for MySQL##################################################################
mysql.changelogColumns=id,name,date_format(registerDate,'%Y-%m-%d %H:%i:%s') as registerDate,version,userName,idRelease
mysql.changelogProjectColumns=id,projectName
mysql.changelogReleaseColumns=rel.id as id,rel.releaseName as releaseName,rel.idProject as idProject,project.projectName as projectName
mysql.create.changelog=create table changelog(id int not null auto_increment primary key,name varchar(200) not null,registerDate timestamp default now(),version bigint not null)Engine=InnoDB;
mysql.insert.changelog=insert into dbSubversion.changelog(name,registerDate,version,userName,idRelease) select '{?}' as name,now() as registerDate,{?} as version,'{?}' as userName,{?} as idRelease from dual
mysql.delete.changelog=delete from changelog where name='{?}'
mysql.upgrade.changelog=alter table changelog add column userName varchar(100) default 'dbSubversionAdmin'
mysql.deleteByName=delete from dbsubversion.changelog where name='{?}'
mysql.insertChangelog=insert into dbSubversion.changelog(name,registerDate,version,userName,idRelease) select '{?}' as name,now() as registerDate,{?} as version,'{?}' as userName,{?} as idRelease from dual
mysql.insert.changelog.upgrade=insert into changelog(name,version,userName)  select '{?}',{?},'{?}' from dual
mysql.insert.changelogProject=insert into dbSubversion.changelogProject(projectName) select '{?}' from dual;
mysql.insert.changelogRelease=insert into dbSubversion.changelogRelease (releaseName,idProject)  select '{?}' as releaseName,p.id as idProject from dbSubversion.changelogProject p where p.projectName like '{?}';
mysql.insert.changelog.release=insert into changelog(name,version,userName,idRelease) select '{?}','{?}','{?}',rel.id  from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on project.id=rel.idProject where project.projectName='{?}' and rel.releaseName='{?}'
mysql.createChangelog=create table if not exists changelog(id int not null auto_increment primary key,name varchar(200) not null,registerDate timestamp default now(),version bigint not null)Engine=InnoDB;
mysql.createSequence=
mysql.getLastChange=select #mysql.changelogColumns# from dbSubversion.changelog where idRelease={?} order by id desc;
mysql.getLastChangeWithoutRelease=select #mysql.changelogColumns# from dbSubversion.changelog where version=(select max(version) from dbSubversion.changelog)
mysql.selectAll=select id,name,date_format(registerDate,'%Y-%m-%d %H:%i:%s') as registerDate,version,userName,idRelease from dbSubversion.changelog order by version asc
mysql.selectByRelease=select #mysql.changelogColumns# from dbSubversion.changelog where idRelease={?} order by version asc
##-----------Changelog Specification---------
mysql.ifExistChangelogSpecification=select COUNT(*) as existe FROM DBA_TAB_COLS where UPPER(TABLE_NAME)=UPPER('changelogSpecification') and TRIM(UPPER(OWNER))='DBSUBVERSION'
mysql.createChangelogSpecification=create table if not exists dbSubversion.changelogSpecification(id integer not null primary key,releaseName varchar(100) not null,releaseVersion varchar(15) not null)
mysql.createSequenceSpecification=
mysql.insertSpecification=insert into dbSubversion.changelogSpecification (releaseName,releaseVersion) select '{?}' as releaseName,{?} as releaseVersion from dual
##-----------Changelog Project---------------
mysql.existProjectTable=select COUNT(*) as existe FROM dbSubversion.changelogProject
mysql.createChangelogProject=create table if not exists dbSubversion.changelogProject(id integer not null auto_increment primary key,projectName varchar(50))
mysql.createSequenceProject=
mysql.insertProject=insert into dbSubversion.changelogProject (projectName) select '{?}' as projectName from dual
mysql.getAllProjects=select #mysql.changelogProjectColumns# from dbSubversion.changelogProject
mysql.getProjectByName=select #mysql.changelogProjectColumns# from dbSubversion.changelogProject where UPPER(projectName)=UPPER('{?}')
mysql.deleteProject=delete from dbsubversion.changelogProject where UPPER(projectName)=UPPER('{?}')
##-----------Changelog Release---------------
mysql.existReleaseTable=select COUNT(*) as existe FROM dbSubversion.changelogRelease
mysql.existReleaseColumnOnChangelog=
mysql.createChangelogRelease=create table if not exists dbSubversion.changelogRelease(id integer not null auto_increment primary key,releaseName varchar(50),idProject integer not null)
mysql.createSequenceRelease=
mysql.createChangelogReleaseColumnOnChangelog=alter table dbSubversion.changelog add idRelease integer
mysql.addConstraintChangelogReleaseOnChangelog=alter table dbSubversion.changelog add constraint fk_changelogRelease foreign key(idRelease) references dbSubversion.changelogRelease(id)
mysql.insertRelease=insert into dbSubversion.changelogRelease (releaseName,idProject) select '{?}' as releaseName,{?} as idProject from dual
mysql.getAllReleases=select #mysql.changelogReleaseColumns# from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on(project.id=rel.idProject)
mysql.getReleasesByProjectName=select #mysql.changelogReleaseColumns# from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on(project.id=rel.idProject) where UPPER(project.projectName)=UPPER('{?}')
mysql.getReleaseByName=select #mysql.changelogReleaseColumns# from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on(project.id=rel.idProject) where UPPER(project.projectName)=UPPER('{?}')  and UPPER(rel.releaseName)=UPPER('{?}')
mysql.deleteRelease=delete from dbsubversion.changelogRelease where UPPER(releaseName)=UPPER('{?}') and idProject=(select id from dbSubversion.changelogProject where UPPER(projectName)=UPPER('{?}'))
######Configuration for Oracle#################################################################
oracle.create.sequenceChangelog=create sequence changelog_seq start with 1 increment by 1 nomaxvalue
oracle.create.changelog=create table changelog(id int not null  primary key,name varchar(200) not null,registerDate timestamp default sysdate,version int not null)
oracle.insert.changelog.release=insert into changelog(id,name,version,userName,idRelease)  select changelog_seq.nextval as idChangelog,'{?}' as name,'{?}' as version,'{?}' as userName,rel.id as idRelease  from dbSubversion.changelogRelease rel join dbSubversion.changelogProject p on rel.idProject=p.id where p.projectName= '{?}' and rel.releaseName= '{?}'
oracle.delete.changelog.release=delete from changelog where name='{?}' and idRelease=(select rel.id as idRelease  from dbSubversion.changelogRelease rel join dbSubversion.changelogProject p on rel.idProject=p.id where p.projectName= '{?}' and rel.releaseName= '{?}')
oracle.insert.changelog=insert into changelog(id,name,version,userName)  select changelog_seq.nextval as idChangelog,'{?}' as name,'{?}' as version,'{?}' as userName from dual
oracle.delete.changelog=delete from changelog where name='{?}'
oracle.upgrade.changelog=alter table changelog add column userName varchar(100) default 'dbSubversionAdmin'
oracle.insert.changelog.upgrade=insert into changelog(id,name,version,userName)  select changelog_seq.nextval,'{?}',{?},'{?}' from dual
oracle.insert.changelogProject=insert into dbSubversion.changelogProject(id,projectName) select dbSubversion.changelogProject_seq.nextval as id, '{?}' from dual\n/
oracle.insert.changelogRelease=insert into dbSubversion.changelogRelease (id,releaseName,idProject)  select dbSubversion.changelogRelease_seq.nextval as id,'{?}' as releaseName,p.id as idProject from dbSubversion.changelogProject p where p.projectName like '{?}'\n/
oracle.insert.changelog.release=insert into changelog(id,name,version,userName,idRelease) select dbSubversion.changelog_seq.nextval as id,'{?}','{?}','{?}',rel.id  from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on project.id=rel.idProject where project.projectName='{?}' and rel.releaseName='{?}'
######Configuration for SQLServer##############################################################
oracle.changelogColumns=id,name,to_char(registerDate,'yyyy-mm-dd hh:mi:ssam') as registerDate,version,userName,idRelease
oracle.changelogProjectColumns=id,projectName
oracle.changelogReleaseColumns=rel.id as id,rel.releaseName as releaseName,rel.idProject as idProject,project.projectName as projectName

mysql.selectAll=select id,name,registerDate,version,userName from dbSubversion.changelog order by version asc

##Dialect-ORACLE###############################################################################
oracle.nextChangelogId=select dbSubversion.changelog_seq.nextval as id from dual
oracle.insertChangelog=insert into dbSubversion.changelog(id,name,registerDate,version,userName,idRelease) select {?} as id ,'{?}' as name,sysdate as registerDate,{?} as version,'{?}' as userName,{?} as idRelease from dual
oracle.findByName=select #oracle.changelogColumns# from dbSubversion.changelog where name like '%{?}%'
oracle.loadByScriptName=select #oracle.changelogColumns# from dbSubversion.changelog where name like '{?}'
oracle.selectByVersion=select #oracle.changelogColumns# from dbSubversion.changelog c where c.version={?}
oracle.deleteByVersion=delete from dbsubversion.changelog where version={?}
oracle.deleteByName=delete from dbsubversion.changelog where name='{?}'
oracle.ifExistChangelog=select COUNT(*) as existe FROM DBA_TAB_COLS where UPPER(TABLE_NAME)=UPPER('changelog') and TRIM(UPPER(OWNER))='DBSUBVERSION'
oracle.createChangelog=create table dbsubversion.changelog(id int not null primary key,name varchar(200) not null,registerDate timestamp default sysdate,version int not null,username varchar(100))
oracle.createSequence=create sequence dbSubversion.changelog_seq start with 1 increment by 1 nomaxvalue
oracle.getLastChange=select #oracle.changelogColumns# from(select row_number() over(partition by idRelease order by id desc) as num, count(id) over(partition by idRelease order by id desc) as cuenta, id,name,registerDate,version,userName,idRelease FROM dbSubversion.changelog WHERE idRelease={?}) where cuenta=num and cuenta=1
oracle.getLastChangeWithoutRelease=select #oracle.changelogColumns# from dbSubversion.changelog where version=(select max(version) from dbSubversion.changelog)
oracle.selectAll=select id,name,to_char(registerDate,'yyyy-mm-dd hh:mi:ssam') as registerDate,version,userName,idRelease from dbSubversion.changelog order by version asc
oracle.selectByRelease=select #oracle.changelogColumns# from dbSubversion.changelog where idRelease={?} order by version asc
##-----------Changelog Specification---------
oracle.ifExistChangelogSpecification=select COUNT(*) as existe FROM DBA_TAB_COLS where UPPER(TABLE_NAME)=UPPER('changelogSpecification') and TRIM(UPPER(OWNER))='DBSUBVERSION'
oracle.createChangelogSpecification=create table dbSubversion.changelogSpecification(id integer not null primary key,releaseName varchar(100) not null,releaseVersion varchar2(15) not null)
oracle.createSequenceSpecification=create sequence dbSubversion.changelogSpec_seq start with 1 increment by 1 nomaxvalue
oracle.insertSpecification=insert into dbSubversion.changelogSpecification (id,releaseName,releaseVersion) select dbSubversion.changelogSpec_seq.nextval as id,'{?}' as releaseName,{?} as releaseVersion from dual
##-----------Changelog Project---------------
oracle.existProjectTable=select COUNT(*) as existe FROM DBA_TAB_COLS where UPPER(TABLE_NAME)=UPPER('changelogProject') and TRIM(UPPER(OWNER))='DBSUBVERSION'
oracle.createChangelogProject=create table dbSubversion.changelogProject(id integer not null primary key,projectName varchar(50))
oracle.createSequenceProject=create sequence dbSubversion.changelogProject_seq start with 1 increment by 1 nomaxvalue
oracle.insertProject=insert into dbSubversion.changelogProject (id,projectName) select dbSubversion.changelogProject_seq.nextval as id,'{?}' as projectName from dual
oracle.getAllProjects=select #oracle.changelogProjectColumns# from dbSubversion.changelogProject
oracle.getProjectByName=select #oracle.changelogProjectColumns# from dbSubversion.changelogProject where UPPER(projectName)=UPPER('{?}')
oracle.deleteProject=delete from dbsubversion.changelogProject where UPPER(projectName)=UPPER('{?}')
##-----------Changelog Release---------------
oracle.existReleaseTable=select COUNT(*) as existe FROM DBA_TAB_COLS where UPPER(TABLE_NAME)=UPPER('changelogRelease') and TRIM(UPPER(OWNER))='DBSUBVERSION'
oracle.existReleaseColumnOnChangelog=select COUNT(*) as existe FROM DBA_TAB_COLS where UPPER(TABLE_NAME)=UPPER('changelog') and TRIM(UPPER(OWNER))='DBSUBVERSION' and  column_name like upper('idRelease')
oracle.createChangelogRelease=create table dbSubversion.changelogRelease(id integer not null primary key,releaseName varchar(50),idProject integer not null)
oracle.createSequenceRelease=create sequence dbSubversion.changelogRelease_seq start with 1 increment by 1 nomaxvalue
oracle.createChangelogReleaseColumnOnChangelog=alter table dbSubversion.changelog add idRelease integer
oracle.addConstraintChangelogReleaseOnChangelog=alter table dbSubversion.changelog add constraint fk_changelogRelease foreign key(idRelease) references dbSubversion.changelogRelease(id)
oracle.insertRelease=insert into dbSubversion.changelogRelease (id,releaseName,idProject) select dbSubversion.changelogRelease_seq.nextval as id,'{?}' as releaseName,{?} as idProject from dual
oracle.getAllReleases=select #oracle.changelogReleaseColumns# from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on(project.id=rel.idProject)
oracle.getReleasesByProjectName=select #oracle.changelogReleaseColumns# from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on(project.id=rel.idProject) where UPPER(project.projectName)=UPPER('{?}')
oracle.getReleaseByName=select #oracle.changelogReleaseColumns# from dbSubversion.changelogRelease rel inner join dbSubversion.changelogProject project on(project.id=rel.idProject) where UPPER(project.projectName)=UPPER('{?}')  and UPPER(rel.releaseName)=UPPER('{?}')
oracle.deleteRelease=delete from dbsubversion.changelogRelease where UPPER(releaseName)=UPPER('{?}') and idProject=(select id from dbSubversion.changelogProject where UPPER(projectName)=UPPER('{?}'))
##You can add another DBMS here! just follow the standar like:
##dbDialect.create.changelog=Scrip to execute
##Remeber to add or set value to db.dialect property in Migrate.properties##################### 